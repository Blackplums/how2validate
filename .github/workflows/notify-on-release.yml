name: 'Notify on New Release'

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      release_name:
        required: true
        type: string
      release_body:
        required: true
        type: string
      release_url:
        required: true
        type: string

permissions:
  discussions: write
  contents: read

jobs:
  create_discussion_post:
    name: 'Create Discussion Post'
    runs-on: ubuntu-latest
    steps:
      - name: Create a new release announcement discussion
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TITLE: "New Release: ${{ inputs.release_name }}"
          BODY: "A new version, **${{ inputs.version }}**, has just been released!\n\n### Release Notes\n${{ inputs.release_body }}\n\n---\n\nYou can view the full release details and download assets here:\n**${{ inputs.release_url }}**"
        run: |
          # 1. Get the category ID for "Release Announcements"
          CATEGORY_ID=$(gh api graphql -f query='
            query($repo: String!, $owner: String!) {
              repository(owner: $owner, name: $repo) {
                discussionCategories(first: 10) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }' -f repo="${{ github.event.repository.name }}" -f owner="${{ github.event.repository.owner.login }}" | jq -r '.data.repository.discussionCategories.nodes[] | select(.name == "Release Announcements") | .id')

          if [ -z "$CATEGORY_ID" ]; then
            echo "Error: Discussion category 'Release Announcements' not found."
            exit 1
          fi

          # 2. Use the category ID to create the discussion
          gh api graphql -f query='
            mutation($repoId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
              createDiscussion(input: {
                repositoryId: $repoId,
                categoryId: $categoryId,
                title: $title,
                body: $body
              }) {
                discussion {
                  url
                }
              }
            }' \
            -f repoId=$(gh repo view ${{ github.repository }} --json id -q '.id') \
            -f categoryId="$CATEGORY_ID" \
            -f title="$TITLE" \
            -f body="$BODY"
